<?php

declare(strict_types=1);

namespace wax_dev\jobs_sonarium;

use jobs_sonarium\economyjob\EconomyJob;
use pocketmine\plugin\PluginBase;
use pocketmine\utils\Config;
use pocketmine\command\CommandSender;
use pocketmine\command\Command;
use pocketmine\event\Listener;
use pocketmine\event\block\BlockBreakEvent;
use pocketmine\event\block\BlockPlaceEvent;
use pocketmine\utils\TextFormat;
use pocketmine\Player;

class Main extends PluginBase{

    /** @var Config */
    private $jobs;
    /** @var Config */
    private $player;

    /** @var  EconomyAPI */
    private $api;

    /** @var EconomyJob   */
    private static $instance;

    public function onEnable(){
        @mkdir($this->getDataFolder());
        if(!is_file($this->getDataFolder()."jobs.yml")){
            $this->jobs = new Config($this->getDataFolder()."jobs.yml", Config::YAML, yaml_parse($this->readResource("jobs.yml")));
        }else{
            $this->jobs = new Config($this->getDataFolder()."jobs.yml", Config::YAML);
        }
        $this->player = new Config($this->getDataFolder()."players.yml", Config::YAML);

        $this->getServer()->getPluginManager()->registerEvents($this, $this);

        $this->api = EconomyAPI::getInstance();
        self::$instance = $this;
    }

    private function readResource($res){
        $path = $this->getFile()."resources/".$res;
        $resource = $this->getResource($res);
        if(!is_resource($resource)){
            $this->getLogger()->debug("Tentative de chargement d’une ressource inconnue ".TextFormat::AQUA.$res.TextFormat::RESET);
            return false;
        }
        $content = stream_get_contents($resource);
        @fclose($content);
        return $content;
    }

    public function onDisable(){
        $this->player->save();
    }

    /**
     * @priority MONITOR
     * @ignoreCancelled true
     * @param BlockBreakEvent $event
     */
    public function onBlockBreak(BlockBreakEvent $event){
        $player = $event->getPlayer();
        $block = $event->getBlock();

        $job = $this->jobs->get($this->player->get($player->getName()));
        if($job !== false){
            if(isset($job[$block->getID().":".$block->getDamage().":break"])){
                $money = $job[$block->getID().":".$block->getDamage().":break"];
                if($money > 0){
                    $this->api->addMoney($player, $money);
                }else{
                    $this->api->reduceMoney($player, $money);
                }
            }
        }
    }

    /**
     * @priority MONITOR
     * @ignoreCancelled true
     * @param BlockPlaceEvent $event
     */
    public function onBlockPlace(BlockPlaceEvent $event){
        $player = $event->getPlayer();
        $block = $event->getBlock();

        $job = $this->jobs->get($this->player->get($player->getName()));
        if($job !== false){
            if(isset($job[$block->getID().":".$block->getDamage().":place"])){
                $money = $job[$block->getID().":".$block->getDamage().":place"];
                if($money > 0){
                    $this->api->addMoney($player, $money);
                }else{
                    $this->api->reduceMoney($player, $money);
                }
            }
        }
    }

    /**
     * @return EconomyJob
     */
    public static function getInstance(){
        return static::$instance;
    }

    /**
     * @return array
     */
    public function getJobs(){
        return $this->jobs->getAll();
    }

    /**
     * @return array
     *
     */
    public function getPlayers(){
        return $this->player->getAll();
    }

    public function onCommand(CommandSender $sender, Command $command, string $label, array $params): bool{
        switch(array_shift($params)){
            case "join":
                if(!$sender instanceof Player){
                    $sender->sendMessage("Veuillez exécuter cette commande dans le jeu.");
                }
                if($this->player->exists($sender->getName())){
                    $sender->sendMessage("Vous avez déjà rejoint job.");
                }else{
                    $job = array_shift($params);
                    if(trim($job) === ""){
                        $sender->sendMessage("Usage: /job join <name>");
                        break;
                    }
                    if($this->jobs->exists($job)){
                        $this->player->set($sender->getName(), $job);
                        $sender->sendMessage("Vous avez rejoint le poste \"$job\"");
                    }else{
                        $sender->sendMessage("Aucun travail n’est nommé \"$job\"");
                    }
                }
                break;
            case "retire":
                if(!$sender instanceof Player){
                    $sender->sendMessage("Veuillez exécuter cette commande dans le jeu.");
                }
                if($this->player->exists($sender->getName())){
                    $job = $this->player->get($sender->getName());
                    $this->player->remove($sender->getName());
                    $sender->sendMessage("Vous avez pris votre retraite \"$job\"");
                }else{
                    $sender->sendMessage("Vous n’avez pas d’emploi que vous avez rejoint");
                }
                break;
            case "list":

                $max = 0;
                foreach($this->jobs->getAll() as $d){
                    $max += count($d);
                }

                $max = ceil(($max / 5));

                $page = array_shift($params);

                $page = max(1, $page);
                $page = min($max, $page);
                $page = (int)$page;

                $n = 1;

                $output = "Affichage de la page de liste des emplois $page of $max : \n";
                foreach($this->jobs->getAll() as $name => $job){
                    $info = "";
                    foreach($job as $id => $money){
                        $cur = (int)ceil(($n / 5));
                        if($cur === $page){
                            $info .= $name." : ".$id." | ".EconomyAPI::getInstance()->getMonetaryUnit()."".$money."\n";
                        }elseif($cur > $page){
                            break;
                        }
                        ++$n;
                    }
                    $output .= $info;
                }
                $sender->sendMessage($output);
                break;
            case "me":
                if(!$sender instanceof Player){
                    $sender->sendMessage("Veuillez exécuter cette commande dans le jeu.");
                }
                if($this->player->exists($sender->getName())){
                    $sender->sendMessage("Ton Jobs : ".$this->player->get($sender->getName()));
                }else{
                    $sender->sendMessage("Vous n’avez aucun emploi que vous avez rejoint.");
                }
                break;
            default:
                $sender->sendMessage($command->getUsage());
        }
        return true;
    }
}

